// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name       String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   hashedPassword String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt

//   accounts Account[]
// }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role UserRole @default(USER)

  accounts Account[]
  
  Experiences Experience[] @relation("Author")
}

model Experience {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  startDate   DateTime
  title       String
  description String
  endDate     DateTime
  pros        Pro[]
  cons        Con[]
  dayEvents   DayEvent[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User         @relation("Author", fields: [userId], references: [id])
}

model DayEvent {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  ExperienceId String     @db.ObjectId
  description  String
  Experience   Experience @relation(fields: [ExperienceId], references: [id])
}

model Con {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  ExperienceId String     @db.ObjectId
  description  String
  Experience   Experience @relation(fields: [ExperienceId], references: [id])
}

model Pro {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  ExperienceId String     @db.ObjectId
  description  String
  Experience   Experience @relation(fields: [ExperienceId], references: [id])
}

// model SavedUser {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   experienceId String @db.ObjectId
//   experience   Experience   @relation(fields: [experienceId], references: [id])
//   user   User   @relation(fields: [userId], references: [id]) 
// }
